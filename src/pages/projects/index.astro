---
import Layout from "../../layouts/Layout.astro";
import ProjectFilters from "../../components/ProjectFilters";
import { Github, ExternalLink } from "lucide-react";
import ProjectCard from "../../components/ProjectCard.astro";
import { allProjects, type Project } from "../../data/projects";

const projects: Project[] = allProjects;
---

<Layout title="Projects">
	<div
		class="relative min-h-screen bg-gradient-to-b from-gray-50 to-white dark:from-gray-950 dark:to-gray-900 text-gray-900 dark:text-gray-100 transition-colors duration-300 font-sans"
	>
		<div
			class="pointer-events-none absolute inset-0 [mask-image:radial-gradient(80%_60%_at_50%_0%,black,transparent)]"
		>
			<div
				class="h-40 bg-gradient-to-b from-orange-200/40 to-transparent dark:from-orange-900/20"
			>
			</div>
		</div>

		<header
			class="relative bg-white/80 dark:bg-gray-900/80 backdrop-blur border-b border-gray-200/60 dark:border-gray-800/60 transition-colors duration-300"
		>
			<div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6 sm:py-8">
				<a
					href="/"
					class="text-orange-600 dark:text-orange-400 hover:text-orange-800 dark:hover:text-orange-300 hover:underline mb-4 sm:mb-6 inline-block text-sm sm:text-base font-medium"
				>
					&larr; Home
				</a>
				<h1
					class="text-3xl sm:text-4xl lg:text-5xl font-bold bg-gradient-to-r from-gray-900 to-gray-600 dark:from-white dark:to-gray-300 bg-clip-text text-transparent mb-2"
				>
					Projects
				</h1>
				<p
					class="text-gray-600 dark:text-gray-300 text-base sm:text-lg leading-relaxed max-w-3xl"
				>
					Explore my latest projects and open-source contributions.
				</p>
			</div>
		</header>

		<main class="relative max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8 sm:py-12">
			<div
				class="bg-white/80 dark:bg-gray-900/80 backdrop-blur-xl p-6 sm:p-8 lg:p-10 rounded-2xl border border-gray-200/50 dark:border-gray-700/50 shadow-lg"
			>
				<ProjectFilters client:load />

				<div
					class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 sm:gap-6 auto-rows-fr"
				>
					{
						projects.map((project) => (
							<div
								class="h-full"
								data-project-item-card
								data-has-live-link={Boolean(project.live_website_url)}
							>
								<ProjectCard project={project} />
							</div>
						))
					}
				</div>
			</div>
		</main>
	</div>
</Layout>

<script>
	// Fuzzy and enhanced search copied to provide consistent filtering behavior
	function fuzzySearch(text: string, query: string): boolean {
		if (!query.trim()) return true;
		const textLower = text.toLowerCase();
		const queryLower = query.toLowerCase();
		if (textLower.includes(queryLower)) return true;
		let queryIndex = 0;
		for (
			let i = 0;
			i < textLower.length && queryIndex < queryLower.length;
			i++
		) {
			if (textLower[i] === queryLower[queryIndex]) queryIndex++;
		}
		return queryIndex === queryLower.length;
	}

	function enhancedSearch(text: string, query: string): boolean {
		if (!query.trim()) return true;
		const textLower = text.toLowerCase();
		const queryLower = query.toLowerCase();
		if (textLower.includes(queryLower)) return true;
		const words = textLower.split(/\s+/);
		const queryWords = queryLower.split(/\s+/);
		const allWordsFound = queryWords.every((qw: string) =>
			words.some((w: string) => w.includes(qw))
		);
		if (allWordsFound) return true;
		return fuzzySearch(textLower, queryLower);
	}

	// Listen for filter events: exact matches first then fuzzy; reorders DOM
	document.addEventListener("project-search", (e: Event) => {
		const { term: searchTerm, showLiveOnly } = (e as CustomEvent).detail;
		const query = (searchTerm || "").trim().toLowerCase();
		const projectCards = Array.from(
			document.querySelectorAll("[data-project-item-card]")
		);
		const exactMatches: HTMLElement[] = [];
		const fuzzyMatches: HTMLElement[] = [];

		projectCards.forEach((el) => {
			const card = el as HTMLElement;
			const title =
				card.querySelector("[data-project-title]")?.textContent || "";
			const description =
				card.querySelector("[data-project-description]")?.textContent || "";
			const languages = Array.from(
				card.querySelectorAll("[data-project-language]")
			).map((n) => n.textContent || "");
			const fields = [title, description, ...languages].map((f) =>
				f.toLowerCase()
			);
			const hasLiveLink =
				card.querySelector("[data-live-link]") !== null ||
				card.getAttribute("data-has-live-link") === "true";

			let isExact = false;
			let isFuzzy = false;
			if (!query) {
				isExact = true; // keep original order when no query
			} else {
				isExact = fields.some((f) => f.includes(query));
				if (!isExact) {
					isFuzzy = fields.some((f) => fuzzySearch(f, query));
				}
			}

			const liveFilter = !showLiveOnly || hasLiveLink;
			const matches = (isExact || isFuzzy) && liveFilter;
			card.style.display = matches ? "" : "none";
			if (matches) {
				if (isExact) exactMatches.push(card);
				else if (isFuzzy) fuzzyMatches.push(card);
			}
		});

		if (query && projectCards.length) {
			const gridContainer = (projectCards[0] as HTMLElement).parentElement;
			if (gridContainer) {
				const frag = document.createDocumentFragment();
				exactMatches.forEach((c) => frag.appendChild(c));
				fuzzyMatches.forEach((c) => frag.appendChild(c));
				gridContainer.appendChild(frag);
			}
		}
	});

	document.addEventListener("DOMContentLoaded", () => {
		// Apply initial filter state (show all projects by default)
		const initialSearchEvent = new CustomEvent("project-search", {
			detail: { term: "", showLiveOnly: false },
		});
		document.dispatchEvent(initialSearchEvent);

		// Handle external link clicks so they don't trigger the card navigation
		document.querySelectorAll("[data-live-link]").forEach((link) => {
			link.addEventListener("click", (e) => {
				e.preventDefault();
				e.stopPropagation();
				const url = link.getAttribute("data-url");
				if (url) window.open(url, "_blank");
			});
		});
		document.querySelectorAll("[data-github-link]").forEach((link) => {
			link.addEventListener("click", (e) => {
				e.preventDefault();
				e.stopPropagation();
				const url = link.getAttribute("data-url");
				if (url) window.open(url, "_blank");
			});
		});
	});
</script>
