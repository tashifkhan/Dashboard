---
import { githubStats } from "../data/github";
import GitHubContributionGraph from "./GitHubContributionGraph.astro";
import {
	GitCommit,
	Star,
	GitPullRequest,
	Users,
	TrendingUp,
	Calendar,
} from "lucide-react";

const { stats, prs, stars, commits } = githubStats;

// Function to get language icon URL from Simple Icons
function getLanguageIcon(languageName: string): string {
	const iconMap: { [key: string]: string } = {
		JavaScript: "javascript",
		TypeScript: "typescript",
		Python: "python",
		Java: "openjdk",
		"C++": "cplusplus",
		"C#": "csharp",
		C: "c",
		PHP: "php",
		Ruby: "ruby",
		Go: "go",
		Rust: "rust",
		Swift: "swift",
		Kotlin: "kotlin",
		Dart: "dart",
		HTML: "html5",
		CSS: "css3",
		SCSS: "sass",
		Vue: "vuedotjs",
		React: "react",
		Angular: "angular",
		"Node.js": "nodedotjs",
		Express: "express",
		"Next.js": "nextdotjs",
		"Nuxt.js": "nuxtdotjs",
		Svelte: "svelte",
		Flutter: "flutter",
		"React Native": "react",
		Ionic: "ionic",
		Electron: "electron",
		MongoDB: "mongodb",
		PostgreSQL: "postgresql",
		MySQL: "mysql",
		Redis: "redis",
		Docker: "docker",
		Kubernetes: "kubernetes",
		AWS: "amazonaws",
		GCP: "googlecloud",
		Azure: "microsoftazure",
		Firebase: "firebase",
		Vercel: "vercel",
		Netlify: "netlify",
		Shell: "gnubash",
		PowerShell: "powershell",
		"Vim script": "vim",
		Lua: "lua",
		R: "r",
		MATLAB: "matlab",
		"Objective-C": "objectivec",
		Scala: "scala",
		Haskell: "haskell",
		Clojure: "clojure",
		Elixir: "elixir",
		Erlang: "erlang",
		"F#": "fsharp",
		Assembly: "assemblyscript",
		WebAssembly: "webassembly",
		Solidity: "solidity",
		YAML: "yaml",
		JSON: "json",
		XML: "xml",
		Markdown: "markdown",
		LaTeX: "latex",
		"Jupyter Notebook": "jupyter",
		Notebook: "jupyter",
		IPython: "jupyter",
		Astro: "astro",
	};

	const iconName =
		iconMap[languageName] ||
		languageName.toLowerCase().replace(/[^a-z0-9]/g, "");
	return `https://cdn.jsdelivr.net/npm/simple-icons@v11/icons/${iconName}.svg`;
}

// Function to get fallback icon for unknown languages
function getFallbackIcon(): string {
	return `data:image/svg+xml,${encodeURIComponent(`
		<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor">
			<path d="M12 2L2 7l10 5 10-5-10-5zM2 17l10 5 10-5M2 12l10 5 10-5"/>
		</svg>
	`)}`;
}
---

<!-- Metrics Grid (Compact) -->
<div class="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-3 sm:gap-4 mb-8">
	{
		[
			{
				label: "Commits",
				value: stats.totalCommits.toLocaleString(),
				sub: "lifetime",
				icon: GitCommit,
			},
			{
				label: "Streak",
				value: stats.currentStreak.toString(),
				sub: "current",
				icon: TrendingUp,
			},
			{
				label: "Longest",
				value: stats.longestStreak.toString(),
				sub: "streak",
				icon: Calendar,
			},
			{
				label: "Stars",
				value: stars.total_stars.toLocaleString(),
				sub: "total",
				icon: Star,
			},
			{
				label: "PRs",
				value: prs.length.toString(),
				sub: "opened",
				icon: GitPullRequest,
			},
			{
				label: "Views",
				value: stats.profile_visitors.toLocaleString(),
				sub: "profile",
				icon: Users,
			},
		].map((card) => (
			<div class="group relative rounded-lg border border-emerald-500/15 dark:border-emerald-400/15 bg-white/60 dark:bg-gray-900/50 backdrop-blur-sm px-3 py-3 flex items-center gap-3 hover:border-emerald-500/35 transition-colors">
				<div class="h-8 w-8 rounded-md bg-gradient-to-br from-emerald-600 to-teal-600 dark:from-emerald-500 dark:to-teal-500 flex items-center justify-center text-white text-[13px] shadow-sm ring-1 ring-white/10 dark:ring-inset dark:ring-emerald-300/10">
					<card.icon className="w-4 h-4" />
				</div>
				<div class="min-w-0 flex-1">
					<p class="text-[10px] uppercase tracking-wide font-medium text-emerald-700/70 dark:text-emerald-300/60 truncate">
						{card.label}
					</p>
					<div class="flex items-baseline gap-1">
						<p class="text-lg font-semibold text-emerald-600 dark:text-emerald-300 tabular-nums leading-none overflow-hidden">
							{card.value}
						</p>
						<span class="text-[10px] text-emerald-900/50 dark:text-emerald-200/40 leading-none">
							{card.sub}
						</span>
					</div>
				</div>
			</div>
		))
	}
</div>

<!-- GitHub Contribution Graph -->
<GitHubContributionGraph />

<!-- Top Languages (Minimalist) -->
<div
	class="group relative overflow-hidden rounded-2xl border border-emerald-500/15 dark:border-emerald-400/15 bg-white/60 dark:bg-gray-900/50 backdrop-blur-sm px-5 py-6 mb-8"
>
	<div
		class="absolute inset-0 pointer-events-none [mask-image:radial-gradient(circle_at_85%_15%,rgba(255,255,255,0.5),transparent_70%)]"
	>
	</div>
	<div class="flex items-start justify-between mb-5">
		<div class="flex items-center gap-3">
			<div
				class="h-9 w-9 rounded-lg bg-gradient-to-br from-emerald-600 to-teal-600 dark:from-emerald-500 dark:to-teal-500 flex items-center justify-center text-white shadow-sm ring-1 ring-white/10 dark:ring-inset dark:ring-emerald-300/10"
			>
				<svg
					class="w-4 h-4"
					viewBox="0 0 24 24"
					fill="none"
					stroke="currentColor"
					stroke-width="2"
					stroke-linecap="round"
					stroke-linejoin="round"
					><path d="M3 3h7v7H3z"></path><path d="M14 3h7v7h-7z"></path><path
						d="M14 14h7v7h-7z"></path><path d="M3 14h7v7H3z"></path></svg
				>
			</div>
			<div>
				<h3
					class="text-base font-semibold text-gray-900 dark:text-gray-100 tracking-tight"
				>
					Top Languages
				</h3>
				<p class="text-xs text-gray-600 dark:text-gray-400">
					Most used across public repos
				</p>
			</div>
		</div>
	</div>
	<div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3 sm:gap-4">
		{
			stats.topLanguages.slice(0, 6).map((lang) => (
				<div class="group/lng relative flex items-center justify-between gap-4 rounded-xl border border-emerald-500/15 dark:border-emerald-400/15 bg-white/50 dark:bg-gray-900/40 px-3 py-3 hover:border-emerald-500/35 transition-colors">
					<div class="flex items-center gap-3 min-w-0">
						<div class="relative flex items-center justify-center w-9 h-9 rounded-lg bg-gradient-to-br from-emerald-500/10 to-emerald-500/0 dark:from-emerald-400/10 dark:to-transparent ring-1 ring-inset ring-emerald-500/20 dark:ring-emerald-400/20 overflow-hidden">
							<img
								src={getLanguageIcon(lang.name)}
								alt={`${lang.name} icon`}
								class="w-5 h-5 object-contain language-icon dark:text-gray-700"
								data-fallback={getFallbackIcon()}
							/>
							<div
								class="absolute -bottom-0.5 -right-0.5 w-3 h-3 rounded-full shadow-sm border border-white/80 dark:border-gray-800"
								style={`background-color: ${lang.color}`}
							/>
						</div>
						<div class="space-y-0.5 min-w-0">
							<p class="text-sm font-medium text-gray-900 dark:text-gray-100 truncate">
								{lang.name}
							</p>
							<div
								class="w-24 h-1 bg-emerald-500/10 dark:bg-emerald-400/10 rounded-full overflow-hidden"
								role="progressbar"
								aria-valuemin="0"
								aria-valuemax="100"
								aria-valuenow={String(
									Math.max(0, Math.min(100, Number(lang.percentage) || 0))
								)}
								aria-label={`${lang.name} usage`}
							>
								<div
									class="h-full bg-[color:var(--c)] rounded-full transition-all duration-500"
									style={`--c: ${lang.color}; width: ${Math.max(0, Math.min(100, Number(lang.percentage) || 0))}%;`}
								/>
							</div>
						</div>
					</div>
					<span class="text-xs font-semibold tabular-nums text-emerald-700/80 dark:text-emerald-300/70">
						{Math.round(
							Math.max(0, Math.min(100, Number(lang.percentage) || 0))
						)}
						%
					</span>
				</div>
			))
		}
	</div>
</div>

<!-- Recent Activity (Minimalist) -->
<div class="grid grid-cols-1 lg:grid-cols-2 gap-5 mb-2">
	{
		(
			[
				{
					title: "Recent Commits",
					icon: GitCommit,
					items: commits
						.slice(0, 5)
						.map((c) => ({ type: "commit" as const, data: c })),
					kind: "commit" as const,
				},
				{
					title: "Recent Pull Requests",
					icon: GitPullRequest,
					items: prs.slice(0, 5).map((p) => ({ type: "pr" as const, data: p })),
					kind: "pr" as const,
				},
			] as const
		).map((panel) => (
			<div class="group relative overflow-hidden rounded-2xl border border-emerald-500/15 dark:border-emerald-400/15 bg-white/60 dark:bg-gray-900/50 backdrop-blur-sm p-5 transition-all duration-300 hover:border-emerald-500/35">
				<div class="absolute inset-0 pointer-events-none [mask-image:radial-gradient(circle_at_80%_0%,rgba(255,255,255,0.4),transparent_70%)]" />
				<div class="flex items-center gap-3 mb-4">
					<div class="h-9 w-9 rounded-lg bg-gradient-to-br from-emerald-600 to-teal-600 dark:from-emerald-500 dark:to-teal-500 flex items-center justify-center text-white shadow-sm ring-1 ring-white/10 dark:ring-inset dark:ring-emerald-300/10">
						<panel.icon className="w-4 h-4" />
					</div>
					<h3 class="text-base font-semibold text-gray-900 dark:text-gray-100 tracking-tight">
						{panel.title}
					</h3>
				</div>
				<div class="space-y-2.5">
					{panel.items.map((entry) => {
						const isCommit = entry.type === "commit";
						// @ts-ignore - dynamic shape awareness
						const commit = isCommit ? entry.data : null;
						// @ts-ignore
						const pr = !isCommit ? entry.data : null;
						return (
							<div class="group/item flex items-start gap-3 rounded-xl border border-emerald-500/15 dark:border-emerald-400/15 bg-white/50 dark:bg-gray-900/40 px-3 py-2.5 hover:border-emerald-500/35 transition-colors">
								<div class="mt-0.5 h-2.5 w-2.5 rounded-sm bg-emerald-500/70 dark:bg-emerald-400/70 ring-1 ring-inset ring-emerald-600/30 dark:ring-emerald-300/30" />
								<div class="flex-1 min-w-0">
									<p class="text-[13px] font-medium text-gray-900 dark:text-gray-100 truncate">
										{isCommit ? commit!.message : pr!.title}
									</p>
									<p class="text-[11px] text-emerald-700/70 dark:text-emerald-300/60 mt-0.5 flex flex-wrap gap-x-1">
										{isCommit ? (
											<>
												<span class="truncate max-w-[120px]">
													{commit!.repo}
												</span>
												<span>•</span>
												<span>
													{new Date(commit!.timestamp).toLocaleDateString()}
												</span>
											</>
										) : (
											<>
												<span class="truncate max-w-[120px]">{pr!.repo}</span>
												<span>•</span>
												<span class="capitalize">{pr!.state}</span>
												<span>•</span>
												<span>
													{new Date(pr!.created_at).toLocaleDateString()}
												</span>
											</>
										)}
									</p>
								</div>
							</div>
						);
					})}
				</div>
			</div>
		))
	}
</div>

<script>
	// Handle language icon loading and styling
	document.addEventListener("DOMContentLoaded", function () {
		const languageIcons = document.querySelectorAll(".language-icon");

		languageIcons.forEach((icon) => {
			const img = icon as HTMLImageElement;

			// Function to apply correct theme styling
			function applyThemeStyle() {
				const isDark = document.documentElement.classList.contains("dark");

				// Don't apply filter if this is a fallback icon
				if (img.src.startsWith("data:image/svg+xml")) {
					img.style.filter = "none";
					img.style.color = isDark ? "#9CA3AF" : "#6B7280";
					return;
				}

				// Simple Icons are typically black SVGs, so we need to handle them properly
				if (isDark) {
					// For dark mode, invert the black icons to white
					img.style.filter = "invert(1) brightness(0.9)";
				} else {
					// For light mode, keep icons darker but not completely black
					img.style.filter = "brightness(0.7)";
				}
			}

			// Set initial styling
			img.style.opacity = "0.9";
			img.style.transition = "all 0.3s ease";
			applyThemeStyle();

			// Handle successful load
			img.addEventListener("load", function () {
				this.style.opacity = "1";
				applyThemeStyle();
			});

			// Handle error loading
			img.addEventListener("error", function () {
				const fallbackUrl = this.dataset.fallback;
				if (fallbackUrl && this.src !== fallbackUrl) {
					this.src = fallbackUrl;
					applyThemeStyle();
				}
			});

			// Apply dark mode styling when theme changes
			const observer = new MutationObserver(() => {
				applyThemeStyle();
			});

			observer.observe(document.documentElement, {
				attributes: true,
				attributeFilter: ["class"],
			});
		});
	});
</script>
