---
import { remark } from "remark";
import remarkHtml from "remark-html";
import rehypePrism from "rehype-prism-plus";

const { content, githubBaseUrl } = Astro.props;

let html = "";

function convertRelativeUrl(url: string): string {
	if (!githubBaseUrl) return url;
	if (url.startsWith("http://") || url.startsWith("https://")) return url;
	let convertedUrl = url;
	if (url.startsWith("./")) {
		convertedUrl = `${githubBaseUrl}/${url.substring(2)}`;
	} else if (url.startsWith("../")) {
		convertedUrl = `${githubBaseUrl}/${url.replace(/^\.\.\//, "")}`;
	} else if (url.startsWith("/")) {
		convertedUrl = `${githubBaseUrl}${url}`;
	} else if (!url.includes("://") && !url.startsWith("#")) {
		convertedUrl = `${githubBaseUrl}/${url}`;
	}
	return convertedUrl;
}

function enhanceHtml(rawHtml: string): string {
	let html = rawHtml;

	// Inline code
	html = html.replace(
		/<code>([^<\n]+)<\/code>/g,
		'<code class="bg-gray-800 text-orange-300 px-2 py-1 rounded text-sm font-mono border border-gray-700">$1</code>'
	);

	// Headers
	html = html.replace(
		/<h1>(.*?)<\/h1>/g,
		'<h1 class="text-2xl font-bold mb-4 text-white border-b border-gray-700 pb-2">$1</h1>'
	);
	html = html.replace(
		/<h2>(.*?)<\/h2>/g,
		'<h2 class="text-xl font-semibold mb-3 text-white/90 mt-6">$1</h2>'
	);
	html = html.replace(
		/<h3>(.*?)<\/h3>/g,
		'<h3 class="text-lg font-medium mb-2 text-white/80 mt-4">$1</h3>'
	);
	html = html.replace(
		/<h4>(.*?)<\/h4>/g,
		'<h4 class="text-base font-medium mb-2 text-white/70 mt-3">$1</h4>'
	);

	// Bold/italic
	html = html.replace(
		/<strong>(.*?)<\/strong>/g,
		'<strong class="font-semibold text-white">$1</strong>'
	);
	html = html.replace(
		/<em>(.*?)<\/em>/g,
		'<em class="italic text-white/90">$1</em>'
	);

	// Images
	html = html.replace(
		/<img([^>]*)src="([^"]+)"([^>]*)>/g,
		(match: string, before: string, src: string, after: string) => {
			const fullSrc = convertRelativeUrl(src);
			return `<img${before}src="${fullSrc}"${after} class="max-w-full h-auto rounded-lg border border-gray-700 my-4 mx-auto block" />`;
		}
	);

	// Links
	html = html.replace(
		/<a href="([^"]+)"([^>]*)>(.*?)<\/a>/g,
		(match: string, url: string, rest: string, text: string) => {
			const fullUrl = convertRelativeUrl(url);
			return `<a href="${fullUrl}" target="_blank" class="text-orange-400 hover:text-orange-300 underline transition-colors"${rest}>${text}</a>`;
		}
	);

	// Lists
	html = html.replace(/<ul>/g, '<ul class="my-3 space-y-1 list-disc pl-6">');
	html = html.replace(/<ol>/g, '<ol class="my-3 space-y-1 list-decimal pl-6">');
	html = html.replace(/<li>/g, '<li class="text-white/80 mb-1">');

	// Tables
	html = html.replace(
		/<table>/g,
		'<div class="overflow-x-auto my-6"><table class="min-w-full bg-gray-800/20 border border-gray-700 rounded-lg overflow-hidden">'
	);
	html = html.replace(/<\/table>/g, "</table></div>");
	html = html.replace(/<thead>/g, '<thead class="bg-gray-800/40">');
	html = html.replace(
		/<th>/g,
		'<th class="px-4 py-3 text-left text-sm font-medium text-white/90 border-b border-gray-600">'
	);
	html = html.replace(
		/<td>/g,
		'<td class="px-4 py-3 text-sm text-white/80 border-b border-gray-700/50">'
	);
	html = html.replace(
		/<tr>/g,
		'<tr class="hover:bg-gray-800/30 transition-colors">'
	);

	// Paragraphs
	html = html.replace(/<p>/g, '<p class="text-white/70 mb-4 leading-relaxed">');

	// Add custom classes to <pre> for code blocks
	html = html.replace(
		/<pre>/g,
		'<pre class="!bg-gray-900 !rounded-lg !border !border-gray-700 !p-4 !overflow-x-auto my-6">'
	);

	return html;
}

if (content) {
	const processed = await remark()
		.use(remarkHtml, { sanitize: false })
		.use(rehypePrism)
		.process(content);
	html = enhanceHtml(processed.value.toString());
} else {
	html = "<p>No content provided.</p>";
}
---

<div class="prose prose-invert max-w-none" set:html={html} />
