---
import { remark } from "remark";
import remarkHtml from "remark-html";
import rehypePrism from "rehype-prism-plus";
import remarkGfm from "remark-gfm";

const { content, githubBaseUrl } = Astro.props;

let html = "";

function convertRelativeUrl(url: string): string {
	if (!githubBaseUrl) return url;
	if (url.startsWith("http://") || url.startsWith("https://")) return url;

	// Convert GitHub URL to raw.githubusercontent.com for images
	let baseUrl = githubBaseUrl;
	if (
		baseUrl.includes("github.com") &&
		!baseUrl.includes("raw.githubusercontent.com")
	) {
		baseUrl =
			baseUrl.replace("github.com", "raw.githubusercontent.com") + "/main";
	}

	let convertedUrl = url;
	if (url.startsWith("./")) {
		convertedUrl = baseUrl + "/" + url.substring(2);
	} else if (url.startsWith("../")) {
		convertedUrl = baseUrl + "/" + url.replace(/^\.\.\//, "");
	} else if (url.startsWith("/")) {
		convertedUrl = baseUrl + url;
	} else if (!url.includes("://") && !url.startsWith("#")) {
		convertedUrl = baseUrl + "/" + url;
	}
	return convertedUrl;
}

function enhanceHtml(rawHtml: string): string {
	let html = rawHtml;

	// Inline code
	html = html.replace(
		/<code>([^<\n]+)<\/code>/g,
		'<code class="bg-gray-800 text-orange-300 px-2 py-1 rounded text-sm font-mono border border-gray-700">$1</code>'
	);

	// Headers
	html = html.replace(
		/<h1>(.*?)<\/h1>/g,
		'<h1 class="text-2xl font-bold mb-4 text-white border-b border-gray-700 pb-2">$1</h1>'
	);
	html = html.replace(
		/<h2>(.*?)<\/h2>/g,
		'<h2 class="text-xl font-semibold mb-3 text-white/90 mt-6">$1</h2>'
	);
	html = html.replace(
		/<h3>(.*?)<\/h3>/g,
		'<h3 class="text-lg font-medium mb-2 text-white/80 mt-4">$1</h3>'
	);
	html = html.replace(
		/<h4>(.*?)<\/h4>/g,
		'<h4 class="text-base font-medium mb-2 text-white/70 mt-3">$1</h4>'
	);

	// Bold/italic
	html = html.replace(
		/<strong>(.*?)<\/strong>/g,
		'<strong class="font-semibold text-white">$1</strong>'
	);
	html = html.replace(
		/<em>(.*?)<\/em>/g,
		'<em class="italic text-white/90">$1</em>'
	);

	// Images
	html = html.replace(
		/<img([^>]*)src="([^"]+)"([^>]*)>/g,
		(match: string, before: string, src: string, after: string) => {
			const fullSrc = convertRelativeUrl(src);
			return (
				"<img" +
				before +
				'src="' +
				fullSrc +
				'"' +
				after +
				' class="max-w-full h-auto rounded-lg border border-gray-700 my-4 mx-auto block" />'
			);
		}
	);

	// Links
	html = html.replace(
		/<a href="([^"]+)"([^>]*)>(.*?)<\/a>/g,
		(match: string, url: string, rest: string, text: string) => {
			const fullUrl = convertRelativeUrl(url);
			return (
				'<a href="' +
				fullUrl +
				'" target="_blank" class="text-orange-400 hover:text-orange-300 underline transition-colors"' +
				rest +
				">" +
				text +
				"</a>"
			);
		}
	);

	// Lists
	html = html.replace(/<ul>/g, '<ul class="my-3 space-y-1 list-disc pl-6">');
	html = html.replace(/<ol>/g, '<ol class="my-3 space-y-1 list-decimal pl-6">');
	html = html.replace(/<li>/g, '<li class="text-white/80 mb-1">');

	// Todo checkboxes (task lists)
	html = html.replace(
		/<input type="checkbox"([^>]*)>/g,
		'<input type="checkbox" class="mr-2 mt-1 h-4 w-4 rounded border-gray-600 bg-gray-700 text-orange-500 focus:ring-orange-500 focus:ring-offset-gray-800"$1>'
	);

	// Enhanced code blocks with language labels and proper closing
	html = html.replace(
		/<pre class="([^"]*)language-([^"]*)"([^>]*)>([\s\S]*?)<\/pre>/g,
		(
			match: string,
			classes: string,
			language: string,
			rest: string,
			content: string
		) => {
			const langLabel = language !== "text" ? language.toUpperCase() : "";
			const langLabelHtml = langLabel
				? '<div class="language-label">' + langLabel + "</div>"
				: "";
			return (
				'<div class="relative group">' +
				langLabelHtml +
				'<pre class="' +
				classes +
				" language-" +
				language +
				'"' +
				rest +
				">" +
				content +
				"</pre></div>"
			);
		}
	);

	// Tables
	html = html.replace(
		/<table>/g,
		'<div class="overflow-x-auto my-6"><table class="min-w-full bg-gray-800/20 border border-gray-700 rounded-lg overflow-hidden">'
	);
	html = html.replace(/<\/table>/g, "</table></div>");
	html = html.replace(/<thead>/g, '<thead class="bg-gray-800/40">');
	html = html.replace(
		/<th>/g,
		'<th class="px-4 py-3 text-left text-sm font-medium text-white/90 border-b border-gray-600">'
	);
	html = html.replace(
		/<td>/g,
		'<td class="px-4 py-3 text-sm text-white/80 border-b border-gray-700/50">'
	);
	html = html.replace(
		/<tr>/g,
		'<tr class="hover:bg-gray-800/30 transition-colors">'
	);

	// Paragraphs
	html = html.replace(/<p>/g, '<p class="text-white/70 mb-4 leading-relaxed">');

	return html;
}

if (content) {
	const processed = await remark()
		.use(remarkGfm)
		.use(remarkHtml, { sanitize: false })
		.use(rehypePrism, {
			showLineNumbers: true,
			lineNumbers: true,
			plugins: ["line-numbers", "command-line", "diff-highlight"],
		})
		.process(content);
	html = enhanceHtml(processed.value.toString());
} else {
	html = "<p>No content provided.</p>";
}
---

<div class="prose prose-invert max-w-none" set:html={html} />
