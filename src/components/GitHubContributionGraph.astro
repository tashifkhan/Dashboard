---
import { Calendar, Star, List as ListIcon } from "lucide-react";
import { starLists } from "../data/starLists";

// Time range (rolling 365 days)
const today = new Date();
const oneYearAgo = new Date(today);
oneYearAgo.setFullYear(today.getFullYear() - 1);

// Fetch raw contribution data (covers multiple years in payload)
let raw: any = null;
try {
  const res = await fetch("https://github-stats.tashif.codes/tashifkhan/contributions");
  if (res.ok) raw = await res.json();
} catch (e) {
  raw = null;
}

// Flatten weeks across the two possible years spanned by the rolling window
function collectWeeks(): any[] {
  if (!raw) return [];
  const yrs = [oneYearAgo.getFullYear(), today.getFullYear()];
  const out: any[] = [];
  for (const y of yrs) {
    const weeks = raw?.contributions?.[y]?.data?.user?.contributionsCollection?.contributionCalendar?.weeks;
    if (Array.isArray(weeks)) out.push(...weeks);
  }
  return out;
}

const allWeeks = collectWeeks();

// Filter days to rolling range & discard empty weeks
const weeks = allWeeks
  .map((w) => ({
    firstDay: w.firstDay,
    contributionDays: w.contributionDays.filter((d: any) => {
      const dDate = new Date(d.date);
      return dDate >= oneYearAgo && dDate <= today;
    }),
  }))
  .filter((w) => w.contributionDays.length > 0);

// Total contributions
const totalContributions = weeks.reduce(
  (acc, w) => acc + w.contributionDays.reduce((s: number, d: any) => s + d.contributionCount, 0),
  0
);

// Month labels: pick first week where month starts in visible range
const monthSet = new Set<string>();
const monthLabels: { label: string; index: number }[] = [];
weeks.forEach((week, wi) => {
  for (const day of week.contributionDays) {
    const date = new Date(day.date);
    if (date.getDate() === 1) {
      const key = date.getMonth() + "-" + date.getFullYear();
      if (!monthSet.has(key)) {
        monthSet.add(key);
        monthLabels.push({ label: date.toLocaleString("en-US", { month: "short" }), index: wi });
      }
    }
  }
});
// Ensure first month label if none landed exactly on day 1
if (monthLabels.length === 0 && weeks.length) {
  const firstDate = new Date(weeks[0].contributionDays[0].date);
  monthLabels.push({ label: firstDate.toLocaleString("en-US", { month: "short" }), index: 0 });
}

function level(count: number) {
  if (count === 0) return 0;
  if (count < 3) return 1;
  if (count < 6) return 2;
  if (count < 10) return 3;
  return 4;
}

const legendLevels = [0, 1, 2, 3, 4];

const rangeLabel = `${oneYearAgo.toLocaleDateString("en-US", { month: "short", day: "numeric", year: "numeric" })} – ${today.toLocaleDateString("en-US", { month: "short", day: "numeric", year: "numeric" })}`;
---
<div class="space-y-6">
  <div class="flex flex-col sm:flex-row sm:items-end sm:justify-between gap-3">
    <div>
      <h3 class="text-lg font-semibold tracking-tight">Contribution Activity</h3>
      <p class="text-[11px] text-muted-foreground">{rangeLabel} • {totalContributions.toLocaleString()} contributions</p>
    </div>
    <div class="flex items-center gap-2 text-[10px] text-muted-foreground">
      <span>Less</span>
      <div class="flex gap-1">
        {legendLevels.map((l) => (
          <span class={`w-3 h-3 border-2 ${l === 0 ? 'bg-background' : l===1 ? 'bg-muted' : l===2 ? 'bg-secondary' : l===3 ? 'bg-accent' : 'bg-primary'}`}></span>
        ))}
      </div>
      <span>More</span>
    </div>
  </div>

  {raw ? (
    <div class="overflow-x-auto border-2 bg-card p-4">
      <div class="min-w-[760px] flex flex-col gap-2">
        <!-- Month labels -->
        <div class="flex text-[10px] text-muted-foreground font-medium pl-6">
          {monthLabels.map(m => (
            <span style={`margin-left: ${m.index * 14}px`} class="w-14 block">{m.label}</span>
          ))}
        </div>
        <!-- Grid -->
        <div class="flex gap-[2px]" id="gh-contrib-grid">
          {weeks.map((week: any) => (
            <div class="flex flex-col gap-[2px]" style="min-width:14px">
              {week.contributionDays.map((day: any) => (
                <div
                  class={`gh-day w-3 h-3 border-2 ${level(day.contributionCount) === 0 ? 'bg-background' : level(day.contributionCount)===1 ? 'bg-muted' : level(day.contributionCount)===2 ? 'bg-secondary' : level(day.contributionCount)===3 ? 'bg-accent' : 'bg-primary'}`}
                  data-date={day.date}
                  data-count={day.contributionCount}
                  title={`${day.contributionCount} on ${new Date(day.date).toLocaleDateString('en-US')}`}
                />
              ))}
            </div>
          ))}
        </div>
      </div>
    </div>
  ) : (
    <div class="neo-card flex items-center gap-3 text-sm">
      <Calendar className="w-4 h-4" />
      <span class="text-muted-foreground">Unable to load contributions right now.</span>
    </div>
  )}

  {starLists.length > 0 && (
    <div class="space-y-3">
      <h4 class="text-sm font-semibold tracking-tight flex items-center gap-2"><Star className="w-4 h-4" /> Star Lists</h4>
      <div class="grid gap-3 sm:grid-cols-2 lg:grid-cols-3">
        {starLists.map(list => (
          <button type="button" data-star-list-select={list.name} class="neo-card text-left flex flex-col gap-2 !p-3 hover:bg-accent hover:text-accent-foreground transition-colors">
            <div class="flex items-start justify-between gap-2">
              <span class="font-medium text-sm leading-tight line-clamp-1">{list.name}</span>
              <span class="inline-flex items-center gap-1 text-[10px] font-mono">
                <ListIcon className="w-3 h-3" />{(list.num_repos ?? list.repositories?.length ?? 0)}
              </span>
            </div>
            {list.description && (<p class="text-[11px] text-muted-foreground line-clamp-3 leading-snug">{list.description}</p>)}
            <span class="mt-auto text-[10px] opacity-70 group-hover:opacity-100">Filter →</span>
          </button>
        ))}
      </div>
    </div>
  )}
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    // Star list selection -> bubble to project filters
    document.querySelectorAll('[data-star-list-select]')?.forEach(btn => {
      btn.addEventListener('click', () => {
        const name = btn.getAttribute('data-star-list-select');
        if (!name) return;
        localStorage.setItem('pending_star_list_select', name);
        document.dispatchEvent(new CustomEvent('open-star-list', { detail: { name } }));
      });
    });
  });
</script>
